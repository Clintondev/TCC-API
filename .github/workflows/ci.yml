name: CI Pipeline

on:
  push:
    branches:
      - ci-cd-enabled
  pull_request:
    branches:
      - ci-cd-enabled

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_US }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY_PROD }}
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ci-cd-api-tcc-task.json
          container-name: ${{ secrets.CONTAINER_PROD }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_PROD }}
          cluster: ${{ secrets.ECS_CLUSTER_PROD }}
          wait-for-service-stability: true

      - name: Rollback if deploy fails
        if: failure()
        run: |
          echo "Deploy falhou. Realizando rollback..."
          PREVIOUS_TASK_DEFINITION=$(aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER_PROD }} \
            --services ${{ secrets.ECS_SERVICE_PROD }} \
            --query "services[0].taskDefinition" \
            --output text)
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_PROD }} \
            --service ${{ secrets.ECS_SERVICE_PROD }} \
            --task-definition $PREVIOUS_TASK_DEFINITION
          echo "Rollback conclu√≠do para task definition: $PREVIOUS_TASK_DEFINITION"